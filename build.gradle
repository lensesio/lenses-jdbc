buildscript {
    ext.kotlin_version = '1.3.50'
    ext.kotlin_test = '3.4.0'
    ext.log4j_version = '2.11.2'
    ext.slf4j_version = '1.7.25'
    ext.avro_version = '1.9.0'
    ext.httpclient_version = '4.5.7'
    ext.jackson_version = '2.9.9'
    ext.kafka_version = '2.3.0'
    ext.ktorVersion = "1.2.3"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.16"
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
        classpath 'net.researchgate:gradle-release:2.7.0'
    }
}


group 'io.lenses'

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: "kotlin"

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.slf4j:slf4j-api:$slf4j_version"
    compile "org.apache.httpcomponents:httpclient:$httpclient_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    compile "org.apache.avro:avro:$avro_version"
    compile 'org.glassfish.tyrus:tyrus-client:1.15'
    compile 'org.glassfish.tyrus:tyrus-core:1.15'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.15'
    implementation "io.ktor:ktor-client-core:$ktorVersion"
    implementation "io.ktor:ktor-client-cio:$ktorVersion"
    implementation "io.ktor:ktor-client-jackson:$ktorVersion"
    implementation "io.ktor:ktor-client-websockets:$ktorVersion"
    implementation "io.ktor:ktor-client-encoding:$ktorVersion"
    implementation "io.ktor:ktor-client-encoding-jvm:$ktorVersion"
    implementation 'org.springframework:spring-websocket:5.1.9.RELEASE'

    implementation 'io.arrow-kt:arrow-core-data:0.9.0'

    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    testCompile "io.kotlintest:kotlintest-runner-junit5:$kotlin_test"
    testCompile "org.apache.kafka:kafka-clients:$kafka_version"
    testCompile 'io.confluent:kafka-avro-serializer:3.2.1'
    testCompile 'org.nanohttpd:nanohttpd:2.3.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// mainClassName = "com.landoop.jdbc.Driver"

jar {
    manifest {
        attributes "Main-Class": "io.lenses.jdbc4.LensesDriver"
    }
}

shadowJar {
    zip64 true
    classifier = null
    manifest {
        attributes "Main-Class": "io.lenses.jdbc4.LensesDriver"
        relocate 'com.fasterxml', 'shadow.com.fasterxml'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

dokka {
    includes = []

    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/Landoop/lenses-jdbc"
        suffix = "#L"
    }

    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask, dependsOn: javadoc) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}

task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

build.dependsOn(copyToLib)

artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// OSSRH publication
if (project.hasProperty('release')) {
    uploadArchives {
        repositories {
            mavenDeployer {
                // POM signature
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                // Target repository
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    description project.description
                    packaging 'jar'
                    url 'https://github.com/landoop/lenses-jdbc'

                    scm {
                        connection 'scm:git:https://github.com/landoop/lenses-jdbc.git'
                        developerConnection 'scm:git:git@github.com:landoop/lenses-jdbc.git'
                        url 'https://github.com/landoop/lenses-jdbc.git'
                    }

                    licenses {
                        license {
                            name 'Apache License 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'sksamuel'
                            name = 'Stephen Samuel'
                        }
                        developer {
                            id = 'stheppi'
                            name = 'Stefan Bocutiu'
                            email = 'stefan@landoop.com'
                        }
                    }
                }
            }
        }
    }
}
